<?xml version="1.0"?>

<!-- $This file is distributed under the terms of the license in /doc/license.txt$ -->

<!-- ====================================================================== 
	 Build script for the VIVO-Cornell product.
	 
	 The deploy.properties file contains both build properties and runtime 
	 properties.
	     
	 The required build properties are:
	 	vitro.core.dir
	 	nihvivo.dir
	    tomcat.home
	    webapp.name
	     ====================================================================== -->
<project name="vivoCornell" default="describe">

	<!--
		Load the properties from deploy.properties.
	-->
	<property name="deploy.properties.file" location="deploy.properties" />
	<fail message="You must create a &quot;${deploy.properties.file}&quot; file.">
		<condition>
			<not>
				<available file="${deploy.properties.file}" />
			</not>
		</condition>
	</fail>
	<property file="${deploy.properties.file}" />
	<fail unless="vitro.core.dir"
	      message="${deploy.properties.file} must contain a value for vitro.core.dir" />
	<fail unless="nihvivo.dir"
	      message="${deploy.properties.file} must contain a value for nihvivo.dir" />

	<!--
		Now get the standard product-build file.
	-->
	<import file="${vitro.core.dir}/webapp/product-build.xml" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: product-prepare
          
          Merge the three levels before building.                      
         - - - - - - - - - - - - - - - - - -->
	<target name="product-prepare">
		<mkdir dir="${appbase.dir}" />
		<mkdir dir="${appbase.dir}/web" />

		<copy todir="${appbase.dir}/web" includeemptydirs="true">
			<dirDifference dir="${corebase.dir}/web">
				<blockingPath>
					<pathelement location="${nihvivo.dir}/productMods" />
					<pathelement location="./productMods" />
				</blockingPath>
			</dirDifference>
			<dirDifference dir="${nihvivo.dir}/productMods">
				<blockingPath>
					<pathelement location="./productMods" />
				</blockingPath>
			</dirDifference>
			<fileset dir="./productMods" />
		</copy>

		<patternset id="appbase.patterns">
			<include name="src/**/*" />
			<include name="lib/**/*" />
			<include name="test/**/*" />
			<include name="themes/**/*" />
			<include name="config/*.properties" />
			<include name="config/solr/*" />
			<include name="context.xml" />
		</patternset>

		<copy todir="${appbase.dir}" includeemptydirs="true">
			<dirDifference dir="${corebase.dir}">
				<patternset refid="appbase.patterns" />
				<exclude name="themes/**/*/" />
				<blockingPath>
					<pathelement location="${nihvivo.dir}" />
					<pathelement location="." />
				</blockingPath>
			</dirDifference>
			<dirDifference dir="${nihvivo.dir}">
				<patternset refid="appbase.patterns" />
				<blockingPath>
					<pathelement location="." />
				</blockingPath>
			</dirDifference>
			<fileset dir=".">
				<patternset refid="appbase.patterns" />
			</fileset>
		</copy>
	</target>

	<import file="${vivoProduct.basedir}/build.xml" />

	<!-- ================================= 
	      target: revisionInfo 
	     
	      We need to override the one from product-build, to get the 3-level effect.                      
	     ================================= -->
	<target name="revisionInfo"
	        depends="vitroCore.revisionInfo"
	        description="--> Store revision info in build">
		<addRevisionInfoLine productName="nihvivo" productCheckoutDir="${nihvivo.dir}" />
		<addRevisionInfoLine productName="${ant.project.name}" productCheckoutDir="${basedir}" />
	</target>

</project>
