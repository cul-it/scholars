package edu.cornell.mannlib.vivo.webimagecapture;

import java.io.File;
import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import edu.cornell.mannlib.vitro.webapp.config.ConfigurationProperties;
import edu.cornell.mannlib.vitro.webapp.controller.VitroHttpServlet;

/** Web image capture servlet for VIVO Cornell. 
 * This servlet will respond to requests URL with
 * an image of the web page at that URL.  
 * 
 * It is intended that the images will be cached.
 * 
 * The web page images will be generated by a 
 * python script that uses Xvfb. This will only 
 * work on a system with XWindows. 
 */

@SuppressWarnings("serial")
public class WebImageCaptureServlet extends VitroHttpServlet{

	
	@Override
	protected void doGet(
			HttpServletRequest req,
			HttpServletResponse resp) 
	throws ServletException, IOException {
				
		if( ! permitted( req ) ){
			doNotPermited(req,resp);					
		}else{						
			String webPageUrl = URLtoGetImageOf( req );
			if( webPageUrl == null ){
				doNotPermited(req,resp);			
			}else{
				handleImageWithNewProcess(webPageUrl,resp);			
			}			
		}
	}	
	
	private String URLtoGetImageOf(HttpServletRequest req) {
		return req.getParameter("url");
	}

	/**
	 * handle the request for the image with a new
	 * process for each request. 
	 * @throws IOException 
	 */
	private void handleImageWithNewProcess(
			String webPageUrl, 
			HttpServletResponse resp) 
	throws IOException {
		
		ConfigurationProperties props = ConfigurationProperties.getBean(this);		
		File workingDir = new File( 
				props.getProperty("vitro.home.directory") + "/webImageCapture" );
		if( !workingDir.exists() ){
			workingDir.mkdirs();
		}
		if( !workingDir.exists() || !workingDir.isDirectory() ){
			log.error("working directory for webImageCapture " +
					"does not exist: "+ workingDir.getAbsolutePath());
		}else{
		
			WebImageCatpureProcess wicp =
				new WebImageCatpureProcess(workingDir);
			//wicp.startProcess();
			wicp.returnImageV2(webPageUrl, resp);
			//wicp.closeProcess();
			
		}
	}
	
//	private void handleImageReuseProcess(){
//	???	
//	}
	
	
	private void doNotPermited(HttpServletRequest req, HttpServletResponse resp) {
		//return some placeholder image
		log.debug("request for web image capture not permited");
	}


	private boolean permitted(HttpServletRequest request) {
		//How can we prevent this from being an open proxy?
		// 		
		// Ideas:
		// Only return images to browsers with tomcat session
		// Exponential back off: minSecBetweenRequests = 2^(requests in last 60 seconds)
		// What else?
		return true;
	}
 
	Log log = LogFactory.getLog(WebImageCaptureServlet.class);
}
